import { BaseDb } from '../interfaces/base-db.js';
import { BaseLoader } from '../interfaces/base-loader.js';
import { RAGApplication } from './rag-application.js';
import { BaseCache } from '../interfaces/base-cache.js';
import { BaseEmbeddings } from '../interfaces/base-embeddings.js';
import { BaseModel } from '../interfaces/base-model.js';
import { SIMPLE_MODELS } from '../global/constants.js';
import { BaseConversations } from '../interfaces/base-conversations.js';
export declare class RAGApplicationBuilder {
    private searchResultCount;
    private loaders;
    private vectorDb;
    private temperature;
    private queryTemplate;
    private cache?;
    private conversations;
    private embeddingModel;
    private initLoaders;
    private model;
    constructor();
    build(): Promise<RAGApplication>;
    addLoader(loader: BaseLoader): this;
    setSearchResultCount(searchResultCount: number): this;
    setVectorDb(vectorDb: BaseDb): this;
    setTemperature(temperature: number): this;
    setQueryTemplate(queryTemplate: string): this;
    setCache(cache: BaseCache): this;
    setConversations(conversations: BaseConversations): this;
    setEmbeddingModel(embeddingModel: BaseEmbeddings): this;
    setLoaderInit(shouldDo: boolean): this;
    setModel(model: string | SIMPLE_MODELS | BaseModel): this;
    getLoaders(): BaseLoader<Record<string, string | number | boolean>, Record<string, null>>[];
    getSearchResultCount(): number;
    getVectorDb(): BaseDb;
    getTemperature(): number;
    getQueryTemplate(): string;
    getCache(): BaseCache;
    getEmbeddingModel(): BaseEmbeddings;
    getLoaderInit(): boolean;
    getModel(): BaseModel;
    getConversations(): BaseConversations;
}
